-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.clientes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  nombre text NOT NULL,
  telefono text,
  email text,
  direccion text,
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT clientes_pkey PRIMARY KEY (id)
);
CREATE TABLE public.compra_detalle (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  compra_id uuid,
  producto_id uuid,
  cantidad integer,
  precio_unitario numeric,
  subtotal numeric,
  CONSTRAINT compra_detalle_pkey PRIMARY KEY (id),
  CONSTRAINT compra_detalle_producto_id_fkey FOREIGN KEY (producto_id) REFERENCES public.productos(id),
  CONSTRAINT compra_detalle_compra_id_fkey FOREIGN KEY (compra_id) REFERENCES public.compras(id)
);
CREATE TABLE public.compras (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  proveedor_id uuid,
  usuario_id uuid,
  total numeric,
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT compras_pkey PRIMARY KEY (id),
  CONSTRAINT compras_usuario_id_fkey FOREIGN KEY (usuario_id) REFERENCES public.profiles(id),
  CONSTRAINT compras_proveedor_id_fkey FOREIGN KEY (proveedor_id) REFERENCES public.proveedores(id)
);
CREATE TABLE public.productos (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  nombre text NOT NULL,
  tipo text,
  marca text,
  compatible_con text,
  proveedor_id uuid,
  stock integer DEFAULT 0,
  costo numeric,
  margen numeric,
  precio_calculado numeric DEFAULT (costo * ((1)::numeric + margen)),
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT productos_pkey PRIMARY KEY (id),
  CONSTRAINT productos_proveedor_id_fkey FOREIGN KEY (proveedor_id) REFERENCES public.proveedores(id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  nombre text,
  apellido text,
  rol text CHECK (rol = ANY (ARRAY['admin'::text, 'empleado'::text, 'contador'::text])),
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.proveedores (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  nombre text NOT NULL,
  cuit text,
  telefono text,
  email text,
  rubro text,
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT proveedores_pkey PRIMARY KEY (id)
);
CREATE TABLE public.turnos (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  cliente_id uuid,
  vehiculo_id uuid,
  fecha timestamp without time zone NOT NULL,
  motivo text,
  estado text DEFAULT 'pendiente'::text CHECK (estado = ANY (ARRAY['pendiente'::text, 'confirmado'::text, 'cancelado'::text, 'realizado'::text])),
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT turnos_pkey PRIMARY KEY (id),
  CONSTRAINT turnos_vehiculo_id_fkey FOREIGN KEY (vehiculo_id) REFERENCES public.vehiculos(id),
  CONSTRAINT turnos_cliente_id_fkey FOREIGN KEY (cliente_id) REFERENCES public.clientes(id)
);
CREATE TABLE public.vehiculos (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  cliente_id uuid,
  marca text,
  modelo text,
  patente text,
  año integer,
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT vehiculos_pkey PRIMARY KEY (id),
  CONSTRAINT vehiculos_cliente_id_fkey FOREIGN KEY (cliente_id) REFERENCES public.clientes(id)
);
CREATE TABLE public.venta_detalle (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  venta_id uuid,
  producto_id uuid,
  cantidad integer,
  precio_unitario numeric,
  subtotal numeric,
  CONSTRAINT venta_detalle_pkey PRIMARY KEY (id),
  CONSTRAINT venta_detalle_venta_id_fkey FOREIGN KEY (venta_id) REFERENCES public.ventas(id),
  CONSTRAINT venta_detalle_producto_id_fkey FOREIGN KEY (producto_id) REFERENCES public.productos(id)
);
CREATE TABLE public.ventas (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  cliente_id uuid,
  usuario_id uuid,
  metodo_pago text CHECK (metodo_pago = ANY (ARRAY['efectivo'::text, 'crédito'::text, 'débito'::text])),
  descuento numeric,
  total numeric,
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT ventas_pkey PRIMARY KEY (id),
  CONSTRAINT ventas_cliente_id_fkey FOREIGN KEY (cliente_id) REFERENCES public.clientes(id),
  CONSTRAINT ventas_usuario_id_fkey FOREIGN KEY (usuario_id) REFERENCES public.profiles(id)
);

-- SUGERENCIAS DE MEJORA DE BASE DE DATOS (Jules, IA Asistente) --

-- 1. ON DELETE / ON UPDATE en Claves Foráneas:
--    Considerar añadir políticas ON DELETE (SET NULL, CASCADE, RESTRICT) y ON UPDATE a las FKs.
--    Ejemplo:
--    ALTER TABLE public.vehiculos DROP CONSTRAINT vehiculos_cliente_id_fkey;
--    ALTER TABLE public.vehiculos ADD CONSTRAINT vehiculos_cliente_id_fkey
--        FOREIGN KEY (cliente_id) REFERENCES public.clientes(id) ON DELETE CASCADE;
--    (Aplicar lógicamente según las necesidades del negocio para cada relación)

-- 2. ÍNDICES (INDEXES):
--    Para mejorar el rendimiento de consultas frecuentes.
--    Ejemplos:
--    CREATE INDEX IF NOT EXISTS idx_clientes_nombre ON public.clientes(nombre text_pattern_ops); -- text_pattern_ops para búsquedas con LIKE 'texto%'
--    CREATE INDEX IF NOT EXISTS idx_productos_nombre ON public.productos(nombre text_pattern_ops);
--    CREATE INDEX IF NOT EXISTS idx_vehiculos_patente ON public.vehiculos(patente);
--    CREATE INDEX IF NOT EXISTS idx_turnos_fecha ON public.turnos(fecha);
--    CREATE INDEX IF NOT EXISTS idx_ventas_created_at ON public.ventas(created_at);
--    CREATE INDEX IF NOT EXISTS idx_compras_created_at ON public.compras(created_at);
--    -- Considerar también índices en todas las columnas FOREIGN KEY si no los crea la BD automáticamente.

-- 3. PRODUCTOS.PRECIO_CALCULADO:
--    Para asegurar que siempre se actualice, si se usa PostgreSQL 12+, considerar:
--    ALTER TABLE public.productos DROP COLUMN precio_calculado;
--    ALTER TABLE public.productos ADD COLUMN precio_calculado numeric GENERATED ALWAYS AS (costo * (1 + margen)) STORED;
--    Si no, un trigger sería la alternativa para recalcular en cada UPDATE de costo o margen.

-- 4. VENTAS.METODO_PAGO:
--    El frontend ahora maneja 'cheque'. Actualizar la restricción CHECK:
--    ALTER TABLE public.ventas DROP CONSTRAINT ventas_metodo_pago_check;
--    ALTER TABLE public.ventas ADD CONSTRAINT ventas_metodo_pago_check
--        CHECK (metodo_pago = ANY (ARRAY['efectivo'::text, 'crédito'::text, 'débito'::text, 'cheque'::text, 'transferencia'::text]));
--    (Añadir 'transferencia' u otros si son necesarios)

-- 5. VENTAS.PLAZO_CHEQUE:
--    Si el campo 'plazo_cheque' (eliminado del JS) fuera necesario para los pagos con cheque,
--    se debería añadir a la tabla ventas:
--    ALTER TABLE public.ventas ADD COLUMN plazo_cheque integer NULL;

-- 6. SOFT DELETES (Borrado Lógico):
--    Para tablas como clientes, productos, etc., si se quiere evitar la pérdida de datos:
--    ALTER TABLE public.clientes ADD COLUMN deleted_at timestamp without time zone DEFAULT NULL;
--    (Y actualizar las consultas de la aplicación para filtrar por `deleted_at IS NULL`)

-- 7. UNICIDAD (Unique Constraints):
--    Considerar para campos que deben ser únicos.
--    Ejemplos:
--    ALTER TABLE public.clientes ADD CONSTRAINT clientes_email_unique UNIQUE (email);
--    ALTER TABLE public.vehiculos ADD CONSTRAINT vehiculos_patente_unique UNIQUE (patente); -- (Considerar contexto regional)
--    ALTER TABLE public.proveedores ADD CONSTRAINT proveedores_cuit_unique UNIQUE (cuit);

-- 8. NOT NULL Constraints:
--    Revisar si algunos campos que actualmente permiten NULL deberían ser NOT NULL.
--    Por ejemplo, en `productos`: `costo` y `margen` podrían ser `NOT NULL DEFAULT 0` si siempre deben tener un valor.
--    En `vehiculos`: `marca`, `modelo`, `patente`, `año` son cruciales. Quizás `cliente_id` también.
--    Ejemplo: ALTER TABLE public.productos ALTER COLUMN costo SET NOT NULL, ALTER COLUMN costo SET DEFAULT 0;

-- 9. COMENTARIOS EN COLUMNAS/TABLAS:
--    Para mejorar la documentación del esquema directamente en la BD.
--    Ejemplo:
--    COMMENT ON COLUMN public.productos.margen IS 'Margen de ganancia expresado como decimal (ej: 0.3 para 30%)';
--    COMMENT ON TABLE public.turnos IS 'Almacena los turnos agendados para clientes y vehículos';

-- Fin de Sugerencias --